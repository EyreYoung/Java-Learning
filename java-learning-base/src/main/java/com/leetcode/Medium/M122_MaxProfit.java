package com.leetcode.Medium;

/**
 * 买卖股票的最佳时机 2
 */

//给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
//
// 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
//
// 返回 你能获得的 最大 利润 。
//
//
//
// 示例 1：
//
//
//输入：prices = [7,1,5,3,6,4]
//输出：7
//解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
//     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
//     总利润为 4 + 3 = 7 。
//
// 示例 2：
//
//
//输入：prices = [1,2,3,4,5]
//输出：4
//解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
//     总利润为 4 。
//
// 示例 3：
//
//
//输入：prices = [7,6,4,3,1]
//输出：0
//解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。
//
//
//
// 提示：
//
//
// 1 <= prices.length <= 3 * 10⁴
// 0 <= prices[i] <= 10⁴
//
// Related Topics 贪心 数组 动态规划 👍 1710 👎 0

public class M122_MaxProfit {

    public static void main(String[] args) {
        System.out.println(new M122_MaxProfit().maxProfit(new int[]{7,1,5,3,6,4}));
    }

    /**
     * 动态规划
     */
    public int maxProfit(int[] prices) {
        // dp0[i]表示第 i 天结束时没有持有股票的最大收益
        int[] dp0 = new int[prices.length];
        // dp1[i]表示第 i 天结束时持有股票的最大收益
        int[] dp1 = new int[prices.length];
        // 假如第一天没有持有股票，收益为0
        dp0[0] = 0;
        // 假如第一天买了股票，收益为当天股价的负数
        dp1[0] = -prices[0];
        for (int i = 1; i < prices.length; i++) {
            // 前一天不再持有股票，当天也没买股票 -> 收益不变
            // 前一天持有股票，当天不再持有股票 -> 之前的收益加上当前股价
            dp0[i] = Math.max(dp0[i - 1], dp1[i - 1] + prices[i]);
            // 前一天不再持有股票，当天买入股票 -> 前一天的收益减去当前股价
            // 前一天持有股票，当前仍然持有 -> 收益不变
            dp1[i] = Math.max(dp0[i - 1] - prices[i], dp1[i - 1]);
        }
        // 最后一天不持有股票肯定比持有股票的最大收益高
        return dp0[dp0.length - 1];
    }

}
